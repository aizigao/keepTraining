import { rDebug } from './util'
import * as R from 'ramda'

/**
我们在 第三节 中讨论了 Ramda 的两个指导原则：
  将数据放到参数列表的最后面。
  柯里化所有的东西。
 */

{
  const forever21 = age => R.ifElse(
    R.gte(R.__, 21), R.always(21), R.inc
  )(age)
  // --> pointFree
  const forever21_2 = R.ifElse(
    R.gte(R.__, 21), R.always(21), R.inc
  )
}

/**
-  它让编程更简单、精练。这并不总是一件好事，但大部分情况下是这样的。
- 它让算法更清晰。通过只关注正在组合的函数，我们可以在没有参数的干扰下，更好地了解发生了什么。
- 它促使我们更专注于正在做的转换的本身，而不是正被转换的数据。
- 它可以帮助我们将函数视为可以作用于不同数据的通用构建模块，而非对特定类型数据的操作。如果给数据一个名字，我们的思想便会被禁锢在："需要在哪里使用我们的函数"；如果去掉参数，便会使我们更有创造力。
 */
